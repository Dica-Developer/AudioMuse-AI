name: Build, Test, and Push AudioMuse AI Docker Image (ARM)

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'The git tag to build (e.g., v0.4.0 or 0.4.0)'
        required: false # Can be left blank for main branch builds

# Concurrency group to ensure only one run at a time and cancel older runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test-arm:
    runs-on: ubuntu-latest # Use a standard runner

    permissions:
      contents: read # Allow checkout to read repository contents
      packages: write # Allow pushing to GitHub Container Registry

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # For manual runs, checkout the specific tag from the input. Otherwise, use the event ref.
          ref: ${{ github.event.inputs.version_tag || github.ref }}

      # Set up QEMU to enable building for multiple architectures on a standard runner
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Docker image tags for ARM
        id: docker_tags
        run: |
          REPO_NAME_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          ALL_TAGS=""

          # Case 1: Manual dispatch with a version tag input
          if [ -n "${{ github.event.inputs.version_tag }}" ]; then
              REF_TO_CHECK="${{ github.event.inputs.version_tag }}"
              VERSION_TAG=$(echo "$REF_TO_CHECK" | sed -e 's|refs/tags/v||g' -e 's|^v||g')
              if [[ "$VERSION_TAG" =~ ^[0-9]+\.[0-9]+\..* ]]; then
                  VERSIONED_TAG="ghcr.io/$REPO_NAME_LOWER:${VERSION_TAG}-ARM"
                  ALL_TAGS="$VERSIONED_TAG"
                  echo "Building manual ARM-specific versioned tag: $VERSIONED_TAG"
              else
                  echo "Manual run error: Input '$REF_TO_CHECK' is not a valid version tag."
              fi

          # Case 2: Push to main branch
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              ARM_TAG="ghcr.io/$REPO_NAME_LOWER:latest-ARM"
              ALL_TAGS="$ARM_TAG"
              echo "Building latest-ARM tag: $ARM_TAG"

          # Case 3: Push with a version tag
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
              VERSION_TAG=$(echo "${{ github.ref }}" | sed -e 's|refs/tags/v||g')
              VERSIONED_TAG="ghcr.io/$REPO_NAME_LOWER:${VERSION_TAG}-ARM"
              ALL_TAGS="$VERSIONED_TAG"
              echo "Building ARM-specific versioned tag from push: $VERSIONED_TAG"

          else
              echo "This trigger ('${{ github.ref }}') does not produce a build."
          fi

          # Export the tags for subsequent steps
          echo "docker_tags=$ALL_TAGS" >> "$GITHUB_OUTPUT"

      - name: Build and Push Docker Image
        id: build-and-push
        if: success() && steps.docker_tags.outputs.docker_tags != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.arm # Use the ARM-specific Dockerfile
          push: true
          platforms: linux/arm64
          tags: ${{ steps.docker_tags.outputs.docker_tags }}
          # THE FIX: Enable Docker layer caching using the GitHub Actions cache backend.
          cache-from: type=gha
          cache-to: type=gha,mode=max
