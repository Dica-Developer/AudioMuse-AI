# STAGE 1: Build Essentia from your modernized repository on a modern base image
FROM ubuntu:22.04 AS builder

# Install modern build dependencies.
# Added libeigen3-dev, a required C++ dependency for Essentia.
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    git \
    wget \
    python3-pip \
    pkg-config \
    libeigen3-dev \
    libfftw3-dev \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswresample-dev \
    libchromaprint-dev \
    libyaml-dev \
    libyaml-cpp-dev \
    libtag1-dev \
    libsamplerate0-dev \
    libatlas-base-dev \
    python3-dev \
    python3-setuptools \
    && rm -rf /var/lib/apt/lists/*

# Install modern Python dependencies for the build
RUN pip3 install --no-cache-dir numpy==1.26.4
RUN pip3 install tensorflow-aarch64==2.16.1

# Clone your updated Essentia repository
WORKDIR /
RUN git clone https://github.com/NeptuneHub/essentia.git

# Set the working directory to the cloned source folder.
WORKDIR /essentia

# THE FINAL FIX: Use Essentia's own helper script to set up TensorFlow.
# This is more robust than setting environment variables manually.
RUN python3 src/3rdparty/tensorflow/setup_tensorflow.py --mode python

# Add the new pkg-config path created by the setup script.
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/aarch64-linux-gnu/pkgconfig/

# Build and install using the Waf build system.
# The updated source code should now compile correctly in this modern environment.
RUN python3 ./waf configure --build-static --with-python --with-tensorflow && \
    python3 ./waf && \
    python3 ./waf install

# --- End of builder stage ---


# STAGE 2: Final application image using Ubuntu 22.04
FROM ubuntu:22.04

ENV LANG=C.UTF-8 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive

WORKDIR /app

# Install runtime dependencies.
RUN apt-get update -o Acquire::Retries=5 -o Acquire::Timeout=30 && \
    apt-get install -y --no-install-recommends \
    python3 python3-pip python3-dev \
    libfftw3-3 libyaml-0-2 libtag1v5 libsamplerate0 \
    ffmpeg wget git vim \
    redis-tools curl \
    supervisor \
    strace \
    procps \
    iputils-ping \
    # Added dependencies for psycopg2-binary
    libpq-dev \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install modern Python packages for the final image.
RUN pip3 install --no-cache-dir numpy==1.26.4

RUN pip3 install --no-cache-dir \
    Flask \
    Flask-Cors \
    redis \
    requests \
    scikit-learn \
    rq \
    pyyaml \
    six \
    annoy \
    psycopg2-binary \
    ftfy \
    flasgger \
    sqlglot \
    google-generativeai

# Copy pre-built Essentia libraries and Python bindings from builder
# Updated paths for Python 3.10
COPY --from=builder /usr/local/lib/python3.10/dist-packages/essentia* /usr/local/lib/python3.10/dist-packages/
COPY --from=builder /usr/local/lib/libessentia.so /usr/local/lib/

# Also copy the TensorFlow C library we used for the build
COPY --from=builder /usr/local/lib/libtensorflow.so.2 /usr/local/lib/
COPY --from=builder /usr/local/lib/libtensorflow_framework.so.2 /usr/local/lib/

# Create model directory
RUN mkdir -p /app/model

# Download models
RUN wget -q -P /app/model \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/audioset-vggish-3.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/danceability-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/danceability-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_aggressive-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_aggressive-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_happy-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_happy-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_party-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_party-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_relaxed-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_relaxed-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_sad-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_sad-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/msd-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/msd-musicnn-1.pb

# Copy application code
COPY . /app

# Copy Supervisor config
COPY deplyment/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Updated paths for Python 3.10
ENV PYTHONPATH=/usr/local/lib/python3.10/dist-packages:/app

EXPOSE 8000

WORKDIR /workspace
CMD ["bash", "-c", "if [ \"$SERVICE_TYPE\" = \"worker\" ]; then echo 'Starting worker processes via supervisord...' && /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf; else echo 'Starting web service...' && python3 /app/app.py; fi"]
