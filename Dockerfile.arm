FROM ubuntu:22.04

ENV LANG=C.UTF-8 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive

WORKDIR /app

# Install all build-time and runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    git \
    wget \
    curl \
    vim \
    python3 python3-pip python3-dev python3-setuptools \
    pkg-config \
    libeigen3-dev \
    libfftw3-dev \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswresample-dev \
    libchromaprint-dev \
    libyaml-dev \
    libyaml-cpp-dev \
    libtag1-dev \
    libsamplerate0-dev \
    libatlas-base-dev \
    libpq-dev \
    redis-tools \
    supervisor \
    procps \
    iputils-ping \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
RUN pip3 install --no-cache-dir numpy==1.26.4
RUN pip3 install --no-cache-dir tensorflow-aarch64==2.16.1

# Install additional Python packages
RUN pip3 install --no-cache-dir \
    Flask \
    Flask-Cors \
    redis \
    requests \
    scikit-learn \
    rq \
    pyyaml \
    six \
    annoy \
    psycopg2-binary \
    ftfy \
    flasgger \
    sqlglot \
    google-generativeai

# Clone Essentia
RUN git clone https://github.com/NeptuneHub/essentia.git /essentia
WORKDIR /essentia

# Setup TensorFlow linking for Essentia
RUN python3 src/3rdparty/tensorflow/setup_tensorflow.py --mode python

# Set environment variables for linker
ENV TF_DIR=/usr/local/lib/python3.10/dist-packages/tensorflow
ENV LDFLAGS="-L${TF_DIR} -L${TF_DIR}/python -l:libtensorflow_framework.so.2 -l:_pywrap_tensorflow_internal.so"
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/aarch64-linux-gnu/pkgconfig/
ENV LD_LIBRARY_PATH=/usr/local/lib

# Build Essentia
RUN python3 ./waf configure --build-static --with-python --with-tensorflow
RUN python3 ./waf
RUN python3 ./waf install

# Clean up build tools to reduce image size
RUN apt-get purge -y \
    build-essential \
    g++ \
    gcc \
    python3-dev \
    libeigen3-dev \
    libfftw3-dev \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswresample-dev \
    libchromaprint-dev \
    libyaml-dev \
    libyaml-cpp-dev \
    libtag1-dev \
    libsamplerate0-dev \
    libatlas-base-dev && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /essentia

# Back to app folder
WORKDIR /app

# Download models
RUN mkdir -p /app/model && wget -q -P /app/model \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/audioset-vggish-3.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/danceability-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/danceability-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_aggressive-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_aggressive-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_happy-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_happy-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_party-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_party-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_relaxed-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_relaxed-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_sad-audioset-vggish-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/mood_sad-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/msd-msd-musicnn-1.pb \
    https://github.com/NeptuneHub/AudioMuse-AI/releases/download/v1.0.0-model/msd-musicnn-1.pb

# Copy application code
COPY . /app
COPY deplyment/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Set PYTHONPATH so Essentia and your app are found
ENV PYTHONPATH=/usr/local/lib/python3.10/dist-packages:/app

EXPOSE 8000

WORKDIR /workspace

CMD ["bash", "-c", "if [ \"$SERVICE_TYPE\" = \"worker\" ]; then echo 'Starting worker processes via supervisord...' && /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf; else echo 'Starting web service...' && python3 /app/app.py; fi"]
